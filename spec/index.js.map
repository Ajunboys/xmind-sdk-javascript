{"version":3,"sources":["webpack:///spec/index.js","webpack:///webpack/bootstrap 62d9a3b33e872a499c18?fc3b","webpack:///./spec/index.spec.js","webpack:///./spec/legend.spec.js","webpack:///./spec/relationship.spec.js","webpack:///./spec/sheet.spec.js","webpack:///./spec/topic.spec.js","webpack:///./spec/workbook.spec.js"],"names":["xmind","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","mocha","setup","run","129","assert","chai","Workbook","Legend","CONST","utils","options","firstSheetId","rootTopicId","firstSheetName","rootTopicName","workbook","sheet","getPrimarySheet","legend","addLegend","markerId","MAKERIDS","description","markerDescriptionNode","attrs","ATTR_MARKERID","ATTR_DESCRIPTION","describe","it","doesNotThrow","addMarkerDescription","findChildNode","markerDescriptionsNode","TAG_MARKER_DESCRIPTION","ok","removeMarkerDescription","equal","childNodes","length","getVisibility","DEFAULT_VISIBILITY","visibility","setVisibility","deepEqual","getPosition","DEFAULT_POSITION","point","x","y","setPosition","130","rootTopic","secondTopicOptions","title","addChild","thirdTopicOptions","relationship","addRelationship","sourceId","targetId","getSource","setSource","getTarget","setTarget","getTitle","setTitle","setModifiedTime","toPlainObject","sheetId","modifiedTime","131","relationshipOptions","secondRelationshipOptions","topics","topicById","relationships","relationshipById","newTitle","Date","getModifiedTime","getTheme","newTheme","oldModifiedTime","setTheme","notEqual","getRootTopic","newModifiedTime","checkRelationships","type","doc","sheets","sheetById","removeRelationship","secondRelationship","132","Topic","topic","getTopic","getBranch","branch","setBranch","setBranchFolded","VAL_FOLDED","getNotes","notes","multiLineNotes","setNotes","JSON","stringify","getLabels","getHyperlink","link","setHyperlink","removeHyperlink","getMarkers","markers","setMarkers","addMarker","removeMarker","forthTopicOptions","secondTopic","thirdTopic","forthTopic","isAncestorOf","moveTo","checkXmlStructure","parentTopic","childTopic","childrenNode","findOrCreateChildNode","TAG_CHILDREN","childrenTopicsNode","TAG_TOPICS","TAG_TOPIC","children","labelsStr","labels","setLabels","133","secondSheetOptions","addSheet","moveSheet","firstChild","getAttribute","destroy","toJSON","removeSheet","secondSheet","134"],"mappings":"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","file":"spec/index.js","sourcesContent":["var xmind =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmocha.setup('bdd');\n\t\n\t__webpack_require__(129);\n\t__webpack_require__(130);\n\t__webpack_require__(131);\n\t__webpack_require__(132);\n\t__webpack_require__(133);\n\t__webpack_require__(134);\n\t\n\tmocha.run();\n\n/***/ },\n\n/***/ 129:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar assert = chai.assert;\n\t\n\tvar Workbook = xmind.Workbook;\n\tvar Legend = xmind.Legend;\n\tvar CONST = xmind.CONST;\n\tvar utils = xmind.utils;\n\t\n\tvar options = {\n\t  firstSheetId: 'firstSheet',\n\t  rootTopicId: 'rootTopic',\n\t  firstSheetName: 'sheet 1',\n\t  rootTopicName: 'root topic'\n\t};\n\tvar workbook = new Workbook(options); // first sheet added\n\tvar sheet = workbook.getPrimarySheet();\n\tvar legend = sheet.addLegend();\n\tvar markerId = CONST.MAKERIDS[0];\n\tvar description = 'flag black';\n\tvar markerDescriptionNode = void 0;\n\tvar attrs = {};\n\tattrs[CONST.ATTR_MARKERID] = markerId;\n\tattrs[CONST.ATTR_DESCRIPTION] = description;\n\t\n\tdescribe('Legend', function () {\n\t  it('legend.addMarkerDescription(markerId, description)', function () {\n\t    assert.doesNotThrow(function () {\n\t      legend.addMarkerDescription(markerId, description);\n\t      markerDescriptionNode = utils.findChildNode(legend.markerDescriptionsNode, CONST.TAG_MARKER_DESCRIPTION, attrs);\n\t    }, 'failed to execute legend.addMarkerDescription(markerId, description)');\n\t    assert.ok(markerDescriptionNode, 'legend.addMarkerDescription(markerId, description) not working: xml structure is wrong');\n\t  });\n\t  it('legend.removeMarkerDescription(markerId)', function () {\n\t    assert.doesNotThrow(function () {\n\t      legend.removeMarkerDescription(markerId);\n\t    }, 'failed to execute legend.removeMarkerDescription(markerId)');\n\t    assert.equal(legend.markerDescriptionsNode.childNodes.length, 0, 'legend.removeMarkerDescription(markerId) not working: xml structure is wrong');\n\t  });\n\t\n\t  it('legend.getVisibility()', function () {\n\t    assert.equal(legend.getVisibility(), Legend.DEFAULT_VISIBILITY, 'legend.getVisibility() not working: visibility not correct');\n\t  });\n\t  it('legend.setVisibility(value)', function () {\n\t    var visibility = 'invisible';\n\t    assert.doesNotThrow(function () {\n\t      legend.setVisibility(visibility);\n\t    }, 'failed to execute legend.setVisibility(value)');\n\t    assert.equal(legend.getVisibility(), visibility, 'legend.setVisibility(value) not working: visibility not correct');\n\t  });\n\t\n\t  it('legend.getPosition()', function () {\n\t    assert.deepEqual(legend.getPosition(), Legend.DEFAULT_POSITION, 'legend.getPosition() not working: position not correct');\n\t  });\n\t  it('legend.setPosition(point)', function () {\n\t    var point = {\n\t      x: 200,\n\t      y: 200\n\t    };\n\t    assert.doesNotThrow(function () {\n\t      legend.setPosition(point);\n\t    }, 'failed to execute legend.setPosition(point)');\n\t    assert.deepEqual(legend.getPosition(), point, 'legend.setPosition(point) not working: position not correct');\n\t  });\n\t});\n\n/***/ },\n\n/***/ 130:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar assert = chai.assert;\n\t\n\tvar Workbook = xmind.Workbook;\n\t\n\tvar options = {\n\t  firstSheetId: 'firstSheet',\n\t  rootTopicId: 'rootTopic',\n\t  firstSheetName: 'sheet 1',\n\t  rootTopicName: 'root topic'\n\t};\n\tvar workbook = new Workbook(options); // first sheet added\n\tvar sheet = workbook.getPrimarySheet();\n\tvar rootTopic = sheet.rootTopic;\n\t\n\tvar secondTopicOptions = {\n\t  id: 'secondTopic',\n\t  title: 'second topic'\n\t};\n\trootTopic.addChild(secondTopicOptions);\n\t\n\tvar thirdTopicOptions = {\n\t  id: 'thirdTopic',\n\t  title: 'third topic'\n\t};\n\trootTopic.addChild(thirdTopicOptions);\n\t\n\tvar relationship = sheet.addRelationship({\n\t  sourceId: options.rootTopicId,\n\t  targetId: secondTopicOptions.id\n\t});\n\t\n\tdescribe('Relationship', function () {\n\t  it('relationship.getSource()', function () {\n\t    assert.equal(relationship.getSource(), options.rootTopicId, 'relationship.getSource() not working: sourceId not correct');\n\t  });\n\t  it('relationship.setSource(value)', function () {\n\t    assert.doesNotThrow(function () {\n\t      relationship.setSource(thirdTopicOptions.id);\n\t    }, 'failed to execute relationship.setSource(value)');\n\t    assert.equal(relationship.getSource(), thirdTopicOptions.id, 'relationship.setSource(value) not working: source not correct');\n\t    assert.throws(function () {\n\t      relationship.setSource(secondTopicOptions.id);\n\t    }, 'source & target should not be the same');\n\t  });\n\t  it('relationship.getTarget()', function () {\n\t    assert.equal(relationship.getTarget(), secondTopicOptions.id, 'relationship.getTarget() not working: targetId not correct');\n\t  });\n\t  it('relationship.setTarget(value)', function () {\n\t    assert.doesNotThrow(function () {\n\t      relationship.setTarget(options.rootTopicId);\n\t    }, 'failed to execute relationship.setTarget(value)');\n\t    assert.equal(relationship.getTarget(), options.rootTopicId, 'relationship.setTarget(value) not working: target not correct');\n\t    assert.throws(function () {\n\t      relationship.setTarget(thirdTopicOptions.id);\n\t    }, 'source & target should not be the same');\n\t  });\n\t  it('relationship.getTitle()', function () {\n\t    assert.equal(relationship.getTitle(), '', 'relationship.getTitle() not working: title not correct');\n\t  });\n\t  it('relationship.setTitle(value)', function () {\n\t    var title = 'strange relationship';\n\t    assert.doesNotThrow(function () {\n\t      relationship.setTitle(title);\n\t    }, 'failed to execute relationship.setTitle(value)');\n\t    assert.equal(relationship.getTitle(), title, 'relationship.setTitle(value) not working: title not correct');\n\t  });\n\t  it('relationship.toPlainObject()', function () {\n\t    relationship.setModifiedTime(1);\n\t    assert.deepEqual(relationship.toPlainObject(), {\n\t      id: relationship.id,\n\t      sheetId: sheet.id,\n\t      sourceId: relationship.getSource(),\n\t      targetId: relationship.getTarget(),\n\t      modifiedTime: 1,\n\t      title: relationship.getTitle()\n\t    }, 'relationship.setTitle(value) not working: title not correct');\n\t  });\n\t});\n\n/***/ },\n\n/***/ 131:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar assert = chai.assert;\n\t\n\tvar Workbook = xmind.Workbook;\n\t//Legend = xmind.Legend,\n\t//CONST = xmind.CONST,\n\t//utils = xmind.utils;\n\t\n\tvar options = {\n\t  firstSheetId: 'firstSheet',\n\t  rootTopicId: 'rootTopic',\n\t  firstSheetName: 'sheet 1',\n\t  rootTopicName: 'root topic'\n\t};\n\tvar workbook = new Workbook(options); // first sheet added\n\tvar sheet = workbook.getPrimarySheet();\n\t\n\tvar secondTopicOptions = {\n\t  id: 'secondTopic',\n\t  title: 'second topic'\n\t};\n\t\n\tvar relationshipOptions = {\n\t  id: 'relationship',\n\t  sourceId: options.rootTopicId,\n\t  targetId: secondTopicOptions.id\n\t};\n\tvar secondRelationshipOptions = {\n\t  id: 'secondRelationship',\n\t  sourceId: options.rootTopicId,\n\t  targetId: secondTopicOptions.id\n\t};\n\t\n\tvar relationship = void 0;\n\tvar rootTopic = void 0;\n\tvar legend = void 0;\n\t\n\tdescribe('Sheet', function () {\n\t  it('sheet.rootTopic', function () {\n\t    rootTopic = sheet.rootTopic;\n\t    rootTopic.addChild(secondTopicOptions);\n\t    assert.ok(rootTopic, 'sheet.rootTopic is null');\n\t  });\n\t  it('sheet.topics', function () {\n\t    assert.equal(sheet.topics.length, 2, 'sheet.topics is not correct');\n\t  });\n\t  it('sheet.topicById', function () {\n\t    assert.equal(sheet.topicById[options.rootTopicId], rootTopic, 'sheet.topicById is not correct');\n\t  });\n\t  it('sheet.relationships', function () {\n\t    relationship = sheet.addRelationship(relationshipOptions); // the first relationship added\n\t    assert.equal(sheet.relationships.length, 1, 'sheet.relationships is not correct');\n\t  });\n\t  it('sheet.relationshipById', function () {\n\t    assert.equal(sheet.relationshipById[relationshipOptions.id], relationship, 'sheet.relationshipById is not correct');\n\t  });\n\t  it('sheet.legend', function () {\n\t    legend = sheet.addLegend();\n\t    assert.ok(legend, 'sheet.legend is not correct');\n\t  });\n\t  it('sheet.getTitle()', function () {\n\t    assert.equal(sheet.getTitle(), options.firstSheetName, 'sheet.getTitle() not working: title is not correct');\n\t  });\n\t  it('sheet.setTitle(title)', function () {\n\t    var newTitle = 'new sheet';\n\t    assert.doesNotThrow(function () {\n\t      sheet.setTitle(newTitle);\n\t    }, 'failed to execute sheet.setTitle(title)');\n\t    assert.equal(sheet.getTitle(), newTitle, 'sheet.setTitle(title) not working: title is not correct');\n\t  });\n\t  it('sheet.getModifiedTime()', function () {\n\t    assert.doesNotThrow(function () {\n\t      new Date(sheet.getModifiedTime());\n\t    }, 'failed to execute sheet.getModifiedTime()');\n\t  });\n\t  it('sheet.getTheme()', function () {\n\t    assert.equal(sheet.getTheme(), '', 'sheet.getTheme() not working: theme is not correct');\n\t  });\n\t  it('sheet.setTheme(theme)', function () {\n\t    var newTheme = 'theme';\n\t    var oldModifiedTime = sheet.getModifiedTime();\n\t    assert.doesNotThrow(function () {\n\t      sheet.setTheme(newTheme);\n\t    }, 'failed to execute sheet.setTheme(theme)');\n\t    assert.equal(sheet.getTheme(), newTheme, 'sheet.setTheme(theme) not working: theme is not correct');\n\t    assert.notEqual(sheet.getModifiedTime(), oldModifiedTime, 'sheet.setTheme() not working: did not change modified time');\n\t  });\n\t  it('sheet.getRootTopic()', function () {\n\t    assert.equal(sheet.getRootTopic(), rootTopic, 'sheet.getRootTopic() not working: rootTopic is not correct');\n\t  });\n\t  describe('sheet.addRelationship(options)', function () {\n\t    it('adding normally', function () {\n\t      assert.doesNotThrow(function () {\n\t        sheet.addRelationship(secondRelationshipOptions);\n\t      }, 'failed to execute sheet.addRelationship(options)');\n\t      assert.equal(sheet.relationships.length, 2, 'sheet.addRelationship(options) not working: relationship not added');\n\t    });\n\t    it('adding with the same parameters', function () {\n\t      assert.throws(function () {\n\t        sheet.addRelationship(relationshipOptions);\n\t      }, 'the same relationship already exists');\n\t    });\n\t  });\n\t  describe('sheet.setModifiedTime()', function () {\n\t    var newModifiedTime = 1;\n\t    it('set by timestamp(number)', function () {\n\t      assert.doesNotThrow(function () {\n\t        sheet.setModifiedTime(newModifiedTime);\n\t      }, 'failed to execute sheet.setModifiedTime(timestamp)');\n\t      assert.equal(sheet.getModifiedTime(), newModifiedTime, 'sheet.setModifiedTime(timestamp) not working: timestamp is not correct');\n\t    });\n\t    it('set by instance of Date', function () {\n\t      assert.doesNotThrow(function () {\n\t        sheet.setModifiedTime(new Date(newModifiedTime));\n\t      }, 'failed to execute sheet.setModifiedTime(date)');\n\t      assert.equal(sheet.getModifiedTime(), newModifiedTime, 'sheet.setModifiedTime(timestamp) not working: timestamp is not correct');\n\t    });\n\t  });\n\t  describe('sheet.removeRelationship(relationship/*index, id, instance or sourceId, targetId*/)', function () {\n\t    it('sheet.relationshipsNode is a shortcut', function () {});\n\t\n\t    function checkRelationships(type) {\n\t      assert.equal(workbook.doc.childNodes.length, 1, 'workbook.removeSheet(' + type + ') not working: xml structure did not changed');\n\t      assert.equal(workbook.sheets.length, 1, 'workbook.removeSheet(' + type + ') not working: workbook.sheets did not changed');\n\t      assert.ok(!workbook.sheetById[secondRelationshipOptions.id], 'workbook.removeSheet(' + type + ') not working: workbook.sheetById did not changed');\n\t    }\n\t\n\t    it('remove by id', function () {\n\t      assert.doesNotThrow(function () {\n\t        sheet.removeRelationship(secondRelationshipOptions.id); // secondSheet\n\t      }, 'failed to execute workbook.removeSheet(id)');\n\t      checkRelationships();\n\t    });\n\t    it('remove by index', function () {\n\t      sheet.addRelationship(secondRelationshipOptions); // reverse\n\t      assert.doesNotThrow(function () {\n\t        sheet.removeRelationship(1); // secondSheet\n\t      }, 'failed to execute workbook.removeSheet(id)');\n\t      checkRelationships();\n\t    });\n\t    it('remove by instance', function () {\n\t      var secondRelationship = sheet.addRelationship(secondRelationshipOptions); // reverse\n\t      assert.doesNotThrow(function () {\n\t        sheet.removeRelationship(secondRelationship); // secondSheet\n\t      }, 'failed to execute workbook.removeSheet(instance)');\n\t      checkRelationships();\n\t    });\n\t    it('remove by sourceId & targetId', function () {\n\t      sheet.addRelationship(secondRelationshipOptions); // reverse\n\t      assert.doesNotThrow(function () {\n\t        sheet.removeRelationship(secondRelationshipOptions.sourceId, secondRelationshipOptions.targetId); // secondSheet\n\t      }, 'failed to execute workbook.removeSheet(sourceId, targetId)');\n\t      checkRelationships();\n\t    });\n\t  });\n\t  it('sheet.destroy()', function () {});\n\t});\n\n/***/ },\n\n/***/ 132:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar assert = chai.assert;\n\tvar Workbook = xmind.Workbook;\n\tvar Topic = xmind.Topic;\n\tvar CONST = xmind.CONST;\n\tvar utils = xmind.utils;\n\t\n\tvar options = {\n\t  firstSheetId: 'firstSheet',\n\t  rootTopicId: 'rootTopic',\n\t  firstSheetName: 'sheet 1',\n\t  rootTopicName: 'root topic'\n\t};\n\tvar workbook = new Workbook(options); // first sheet added\n\tvar sheet = workbook.getPrimarySheet();\n\tvar topic = sheet.getRootTopic();\n\t\n\tdescribe('Topic', function () {\n\t  it('Topic.getTopic(topic/*id or instance*/, sheet)', function () {\n\t    assert.equal(Topic.getTopic(options.rootTopicId, sheet), topic, 'Topic.getTopic(id, sheet) not working: topic is not correct');\n\t    assert.equal(Topic.getTopic(topic, sheet), topic, 'Topic.getTopic(topic, sheet) not working: topic is not correct');\n\t  });\n\t  it('topic.getTitle()', function () {\n\t    assert.equal(topic.getTitle(), options.rootTopicName, 'topic.getTitle() not working: title is not correct');\n\t  });\n\t  it('topic.setTitle(title)', function () {\n\t    var newTitle = 'new topic';\n\t    assert.doesNotThrow(function () {\n\t      topic.setTitle(newTitle);\n\t    }, 'failed to execute topic.setTitle(title)');\n\t    assert.equal(topic.getTitle(), newTitle, 'topic.setTitle(title) not working: title is not correct');\n\t  });\n\t  it('topic.getModifiedTime()', function () {\n\t    assert.doesNotThrow(function () {\n\t      new Date(topic.getModifiedTime());\n\t    }, 'failed to execute topic.getModifiedTime()');\n\t  });\n\t  it('topic.getBranch()', function () {\n\t    assert.equal(topic.getBranch(), '', 'topic.getBranch() not working: branch is not correct');\n\t  });\n\t  it('topic.setBranch(value)', function () {\n\t    var branch = 'something';\n\t    assert.doesNotThrow(function () {\n\t      topic.setBranch(branch);\n\t    }, 'failed to execute sheet.setBranch(value)');\n\t    assert.equal(topic.getBranch(), branch, 'topic.setBranch(value) not working: branch is not correct');\n\t  });\n\t  it('topic.setBranchFolded()', function () {\n\t    assert.doesNotThrow(function () {\n\t      topic.setBranchFolded();\n\t    }, 'failed to execute sheet.setBranchFolded()');\n\t    assert.equal(topic.getBranch(), CONST.VAL_FOLDED, 'topic.setBranchFolded() not working: branch is not correct');\n\t  });\n\t  //it('topic.moveChild(fromIndex, toIndex)', function() {});\n\t  it('topic.getNotes()', function () {\n\t    assert.equal(topic.getNotes(), '', 'topic.getNotes() not working: notes is not correct');\n\t  });\n\t  it('topic.setNotes(notes)', function () {\n\t    var notes = 'some notes';\n\t    var multiLineNotes = 'some notes\\nother notes';\n\t    assert.doesNotThrow(function () {\n\t      topic.setNotes(notes);\n\t    }, 'failed to execute sheet.setNotes(notes)');\n\t    assert.equal(topic.getNotes(), notes, 'topic.setNotes(notes) not working: notes is not correct');\n\t    assert.equal(topic.setNotes(multiLineNotes).getNotes(), multiLineNotes, 'topic.setNotes(notes) not working: notes is not correct');\n\t  });\n\t  it('topic.getLabels()', function () {\n\t    assert.equal(JSON.stringify(topic.getLabels()), JSON.stringify([]), 'topic.getLabels() not working: labels is not correct');\n\t  });\n\t  it('topic.getHyperlink()', function () {\n\t    assert.equal(topic.getHyperlink(), '', 'topic.getHyperlink() not working: link is not correct');\n\t  });\n\t  it('topic.setHyperlink(hyperlink)', function () {\n\t    var link = 'http://sample.com';\n\t    assert.equal(topic.setHyperlink(link).getHyperlink(), link, 'topic.setHyperlink(hyperlink) not working: link is not correct');\n\t  });\n\t  it('topic.removeHyperlink()', function () {\n\t    assert.equal(topic.removeHyperlink().getHyperlink(), '', 'topic.removeHyperlink() not working: link is not correct');\n\t  });\n\t  it('topic.getMarkers()', function () {\n\t    assert.equal(JSON.stringify(topic.getMarkers()), JSON.stringify([]), 'topic.getMarkers() not working: markders is not correct');\n\t  });\n\t  it('topic.setMarkers(markers)', function () {\n\t    var markers = ['a', 'bc', 'd'];\n\t    assert.doesNotThrow(function () {\n\t      topic.setMarkers(markers);\n\t    }, 'failed to execute sheet.setMarkers(markers)');\n\t    assert.equal(JSON.stringify(topic.getMarkers()), JSON.stringify(['a', 'bc', 'd']), 'topic.setMarkers(markers) not working: markers is not correct');\n\t  });\n\t  it('topic.addMarker(id)', function () {\n\t    topic.setMarkers([]);\n\t    assert.equal(JSON.stringify(topic.addMarker('face').getMarkers()), JSON.stringify(['face']), 'topic.addMarker(markerId) not working: markers is not correct');\n\t  });\n\t  it('topic.removeMarker(id)', function () {\n\t    topic.setMarkers([]);\n\t    assert.equal(JSON.stringify(topic.addMarker('face').removeMarker('face').getMarkers()), JSON.stringify([]), 'topic.addMarker(markerId) not working: markers is not correct');\n\t  });\n\t\n\t  var secondTopicOptions = {\n\t    id: 'secondTopic',\n\t    title: 'second topic'\n\t  };\n\t  var thirdTopicOptions = {\n\t    id: 'thirdTopic',\n\t    title: 'third topic'\n\t  };\n\t  var forthTopicOptions = {\n\t    id: 'forthTopic',\n\t    title: 'forth topic'\n\t  };\n\t  var secondTopic = topic.addChild(secondTopicOptions);\n\t  var thirdTopic = topic.addChild(thirdTopicOptions);\n\t  var forthTopic = topic.addChild(forthTopicOptions);\n\t\n\t  describe('topic.isAncestorOf(targetTopic)', function () {\n\t    it('check by id', function () {\n\t      assert.equal(secondTopic.isAncestorOf(topic.id), false, 'topic.isAncestorOf(targetTopic) not working: result is wrong');\n\t      assert.equal(topic.isAncestorOf(secondTopic.id), true, 'topic.isAncestorOf(targetTopic) not working: result is wrong');\n\t    });\n\t    it('check by instance', function () {\n\t      assert.equal(secondTopic.isAncestorOf(topic), false, 'topic.isAncestorOf(targetTopic) not working: result is wrong');\n\t      assert.equal(topic.isAncestorOf(secondTopic), true, 'topic.isAncestorOf(targetTopic) not working: result is wrong');\n\t    });\n\t  });\n\t  describe('topic.moveTo(targetTopic)', function () {\n\t    it('move by id', function () {\n\t      assert.doesNotThrow(function () {\n\t        thirdTopic.moveTo(secondTopic.id);\n\t      }, 'failed to execute topic.moveTo(targetTopicId)');\n\t    });\n\t    it('move by instance', function () {\n\t      assert.doesNotThrow(function () {\n\t        forthTopic.moveTo(thirdTopic);\n\t      }, 'failed to execute topic.moveTo(targetTopic)');\n\t    });\n\t    it('moving to null', function () {\n\t      assert.throws(function () {\n\t        forthTopic.moveTo();\n\t      }, 'target topic does not exist');\n\t    });\n\t    it('moving to itself', function () {\n\t      assert.throws(function () {\n\t        forthTopic.moveTo(forthTopic);\n\t      }, 'cannot move to itself');\n\t    });\n\t    it('moving to child', function () {\n\t      assert.throws(function () {\n\t        secondTopic.moveTo(forthTopic);\n\t      }, 'cannot move to a child topic');\n\t    });\n\t    it('moving to ancestor', function () {\n\t      assert.doesNotThrow(function () {\n\t        forthTopic.moveTo(secondTopic);\n\t      }, 'failed to execute topic.moveTo(targetTopic)');\n\t      assert.equal(forthTopic.children.length, 0, 'topic.moveTo(targetTopic) not working: count of children is wrong');\n\t      assert.equal(thirdTopic.children.length, 0, 'topic.moveTo(targetTopic) not working: count of children is wrong');\n\t      assert.equal(secondTopic.children.length, 2, 'topic.moveTo(targetTopic) not working: count of children is wrong');\n\t      assert.equal(topic.children.length, 1, 'topic.moveTo(targetTopic) not working: count of children is wrong');\n\t\n\t      function checkXmlStructure(parentTopic, childTopic) {\n\t        var childrenNode = utils.findOrCreateChildNode(parentTopic.doc, CONST.TAG_CHILDREN);\n\t        var childrenTopicsNode = utils.findOrCreateChildNode(childrenNode, CONST.TAG_TOPICS);\n\t        assert.ok(!!utils.findChildNode(childrenTopicsNode, CONST.TAG_TOPIC, {\n\t          id: childTopic.id\n\t        }), 'topic.moveTo(targetTopic) not working: xml structure is not correctly changed');\n\t      }\n\t\n\t      checkXmlStructure(topic, secondTopic);\n\t      checkXmlStructure(secondTopic, thirdTopic);\n\t      checkXmlStructure(secondTopic, forthTopic);\n\t    });\n\t  });\n\t  // add test cases for floating topics {\n\t  // }\n\t  describe('topic.setLabels(labels)', function () {\n\t    var labelsStr = 'a, bc , d';\n\t    var labels = ['hello', 'world '];\n\t    it('set with string', function () {\n\t      assert.doesNotThrow(function () {\n\t        topic.setLabels(labelsStr);\n\t      }, 'failed to execute sheet.setLabels(labels)');\n\t      assert.equal(JSON.stringify(topic.getLabels()), JSON.stringify(['a', 'bc', 'd']), 'topic.setLabels(labels) not working: labels is not correct');\n\t      assert.equal(JSON.stringify(topic.setLabels(labels).getLabels()), JSON.stringify(['hello', 'world']), 'topic.setLabels(labels) not working: labels is not correct');\n\t    });\n\t    it('set with array', function () {});\n\t  });\n\t  describe('topic.addChild(/*instance or options*/)', function () {\n\t    it('add with an instance', function () {});\n\t    it('add with options', function () {});\n\t  });\n\t  describe('topic.removeChild(child/*id or instance*/, dryrun)', function () {\n\t    it('remove by id', function () {});\n\t    it('remove by instance', function () {});\n\t    it('remove in dryrun mode', function () {});\n\t  });\n\t  describe('topic.setModifiedTime()', function () {\n\t    var newModifiedTime = 1;\n\t    it('set by timestamp(number)', function () {\n\t      assert.doesNotThrow(function () {\n\t        topic.setModifiedTime(newModifiedTime);\n\t      }, 'failed to execute topic.setModifiedTime(timestamp)');\n\t      assert.equal(topic.getModifiedTime(), newModifiedTime, 'topic.setModifiedTime(timestamp) not working: timestamp is not correct');\n\t    });\n\t    it('set by instance of Date', function () {\n\t      assert.doesNotThrow(function () {\n\t        topic.setModifiedTime(new Date(newModifiedTime));\n\t      }, 'failed to execute topic.setModifiedTime(date)');\n\t      assert.equal(topic.getModifiedTime(), newModifiedTime, 'topic.setModifiedTime(timestamp) not working: timestamp is not correct');\n\t    });\n\t  });\n\t});\n\n/***/ },\n\n/***/ 133:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar assert = chai.assert;\n\t\n\tvar Workbook = xmind.Workbook;\n\t\n\tdescribe('Workbook', function () {\n\t  var options = {\n\t    firstSheetId: 'firstSheet',\n\t    rootTopicId: 'rootTopic',\n\t    firstSheetName: 'sheet 1',\n\t    rootTopicName: 'root topic'\n\t  };\n\t  var workbook = void 0,\n\t      sheet = void 0,\n\t      rootTopic = void 0;\n\t\n\t  it('new Workbook(options)', function () {\n\t    assert.doesNotThrow(function () {\n\t      workbook = new Workbook(options); // first sheet added\n\t      sheet = workbook.getPrimarySheet();\n\t      rootTopic = sheet.rootTopic;\n\t    }, 'failed to create a Workbook instance');\n\t  });\n\t  it('workbook.sheetById', function () {\n\t    assert.equal(workbook.sheetById[options.firstSheetId], sheet, 'workbook.sheetById is not working');\n\t  });\n\t  it('workbook.sheets', function () {\n\t    assert.equal(workbook.sheets[0], sheet, 'workbook.sheets is not working');\n\t  });\n\t\n\t  it('workbook.getModifiedTime()', function () {\n\t    assert.doesNotThrow(function () {\n\t      new Date(workbook.getModifiedTime());\n\t    }, 'failed to execute workbook.getModifiedTime()');\n\t  });\n\t\n\t  it('workbook.getPrimarySheet()', function () {\n\t    assert.equal(options.firstSheetName, sheet.getTitle(), 'sheet name unmatched');\n\t    assert.equal(options.rootTopicName, rootTopic.getTitle(), 'root topic name unmatched');\n\t  });\n\t\n\t  var secondSheetOptions = {\n\t    id: 'secondSheet',\n\t    title: 'sheet 2',\n\t    rootTopicId: 'rootTopic',\n\t    rootTopicName: 'root topic'\n\t  };\n\t  it('workbook.addSheet(options)', function () {\n\t    assert.throws(function () {\n\t      workbook.addSheet({\n\t        id: options.firstSheetId, // duplicated id\n\t        title: '',\n\t        rootTopicId: 'some id',\n\t        rootTopicName: 'some name'\n\t      });\n\t    }, 'sheet id \\'' + options.firstSheetId + '\\' already exists!');\n\t    assert.doesNotThrow(function () {\n\t      workbook.addSheet(secondSheetOptions); // second sheet added\n\t    }, 'failed to execute workbook.addSheet(options)');\n\t  });\n\t  it('workbook.moveSheet(fromIndex, toIndex)', function () {\n\t    assert.doesNotThrow(function () {\n\t      workbook.moveSheet(1, 0);\n\t    }, 'failed to execute workbook.moveSheet(fromIndex, toIndex)');\n\t    assert.equal(workbook.doc.firstChild.getAttribute('id'), workbook.sheets[0].doc.getAttribute('id'), 'workbook.moveSheet(fromIndex, toIndex) not working: xml structure did not changed');\n\t    assert.notEqual(workbook.getPrimarySheet(), sheet, 'workbook.moveSheet(fromIndex, toIndex) not working');\n\t  });\n\t  it('workbook.destroy()', function () {\n\t    workbook.destroy();\n\t    assert.ok(workbook, 'workbook should not be destroyed');\n\t  });\n\t  it('workbook.toJSON()', function () {\n\t    assert.doesNotThrow(function () {\n\t      workbook.toJSON();\n\t    });\n\t  });\n\t  describe('workbook.setModifiedTime()', function () {\n\t    var newModifiedTime = 1;\n\t    it('set by timestamp(number)', function () {\n\t      assert.doesNotThrow(function () {\n\t        workbook.setModifiedTime(newModifiedTime);\n\t      }, 'failed to execute workbook.setModifiedTime(timestamp)');\n\t      assert.equal(workbook.getModifiedTime(), newModifiedTime, 'workbook.setModifiedTime(timestamp) not working: timestamp is not correct');\n\t    });\n\t    it('set by instance of Date', function () {\n\t      assert.doesNotThrow(function () {\n\t        workbook.setModifiedTime(new Date(newModifiedTime));\n\t      }, 'failed to execute workbook.setModifiedTime(date)');\n\t      assert.equal(workbook.getModifiedTime(), newModifiedTime, 'workbook.setModifiedTime(timestamp) not working: timestamp is not correct');\n\t    });\n\t  });\n\t  describe('workbook.removeSheet(/* id or index or Sheet instance */)', function () {\n\t    it('remove by id', function () {\n\t      assert.doesNotThrow(function () {\n\t        workbook.removeSheet(secondSheetOptions.id); // secondSheet\n\t      }, 'failed to execute workbook.removeSheet(id)');\n\t      assert.equal(workbook.doc.childNodes.length, 1, 'workbook.removeSheet(id) not working: xml structure did not changed');\n\t      assert.equal(workbook.sheets.length, 1, 'workbook.removeSheet(id) not working: workbook.sheets did not changed');\n\t      assert.ok(!workbook.sheetById[secondSheetOptions.id], 'workbook.removeSheet(id) not working: workbook.sheetById did not changed');\n\t    });\n\t    it('remove by index', function () {\n\t      workbook.addSheet(secondSheetOptions); // reverse\n\t      assert.doesNotThrow(function () {\n\t        workbook.removeSheet(1); // secondSheet\n\t      }, 'failed to execute workbook.removeSheet(index)');\n\t      assert.equal(workbook.doc.childNodes.length, 1, 'workbook.removeSheet(index) not working: xml structure did not changed');\n\t      assert.equal(workbook.sheets.length, 1, 'workbook.removeSheet(index) not working: workbook.sheets did not changed');\n\t      assert.ok(!workbook.sheetById[secondSheetOptions.id], 'workbook.removeSheet(index) not working: workbook.sheetById did not changed');\n\t    });\n\t    it('remove by instance', function () {\n\t      var secondSheet = workbook.addSheet(secondSheetOptions); // reverse\n\t      assert.doesNotThrow(function () {\n\t        workbook.removeSheet(secondSheet); // secondSheet\n\t      }, 'failed to execute workbook.removeSheet(index)');\n\t      assert.equal(workbook.doc.childNodes.length, 1, 'workbook.removeSheet(index) not working: xml structure did not changed');\n\t      assert.equal(workbook.sheets.length, 1, 'workbook.removeSheet(index) not working: workbook.sheets did not changed');\n\t      assert.ok(!workbook.sheetById[secondSheetOptions.id], 'workbook.removeSheet(index) not working: workbook.sheetById did not changed');\n\t    });\n\t  });\n\t});\n\n/***/ },\n\n/***/ 134:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n/***/ }\n\n/******/ });\n\n\n/** WEBPACK FOOTER **\n ** spec/index.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 62d9a3b33e872a499c18\n **/","mocha.setup('bdd');\n\nrequire('./legend.spec');\nrequire('./relationship.spec');\nrequire('./sheet.spec');\nrequire('./topic.spec');\nrequire('./workbook.spec');\nrequire('./xmind.spec');\n\nmocha.run();\n\n\n\n/** WEBPACK FOOTER **\n ** ./spec/index.spec.js\n **/","const assert = chai.assert;\n\nconst Workbook = xmind.Workbook;\nconst Legend = xmind.Legend;\nconst CONST = xmind.CONST;\nconst utils = xmind.utils;\n\nconst options = {\n  firstSheetId: 'firstSheet',\n  rootTopicId: 'rootTopic',\n  firstSheetName: 'sheet 1',\n  rootTopicName: 'root topic',\n};\nconst workbook = new Workbook(options); // first sheet added\nconst sheet = workbook.getPrimarySheet();\nconst legend = sheet.addLegend();\nconst markerId = CONST.MAKERIDS[0];\nconst description = 'flag black';\nlet markerDescriptionNode;\nconst attrs = {};\nattrs[CONST.ATTR_MARKERID] = markerId;\nattrs[CONST.ATTR_DESCRIPTION] = description;\n\ndescribe('Legend', () => {\n  it('legend.addMarkerDescription(markerId, description)', () => {\n    assert.doesNotThrow(() => {\n      legend.addMarkerDescription(markerId, description);\n      markerDescriptionNode = utils.findChildNode(\n        legend.markerDescriptionsNode,\n        CONST.TAG_MARKER_DESCRIPTION,\n        attrs\n      );\n    }, 'failed to execute legend.addMarkerDescription(markerId, description)');\n    assert.ok(\n      markerDescriptionNode,\n      'legend.addMarkerDescription(markerId, description) not working: xml structure is wrong'\n    );\n  });\n  it('legend.removeMarkerDescription(markerId)', () => {\n    assert.doesNotThrow(() => {\n      legend.removeMarkerDescription(markerId);\n    }, 'failed to execute legend.removeMarkerDescription(markerId)');\n    assert.equal(\n      legend.markerDescriptionsNode.childNodes.length,\n      0,\n      'legend.removeMarkerDescription(markerId) not working: xml structure is wrong'\n    );\n  });\n\n  it('legend.getVisibility()', () => {\n    assert.equal(\n      legend.getVisibility(),\n      Legend.DEFAULT_VISIBILITY,\n      'legend.getVisibility() not working: visibility not correct'\n    );\n  });\n  it('legend.setVisibility(value)', () => {\n    const visibility = 'invisible';\n    assert.doesNotThrow(() => {\n      legend.setVisibility(visibility);\n    }, 'failed to execute legend.setVisibility(value)');\n    assert.equal(\n      legend.getVisibility(),\n      visibility,\n      'legend.setVisibility(value) not working: visibility not correct'\n    );\n  });\n\n  it('legend.getPosition()', () => {\n    assert.deepEqual(\n      legend.getPosition(),\n      Legend.DEFAULT_POSITION,\n      'legend.getPosition() not working: position not correct'\n    );\n  });\n  it('legend.setPosition(point)', () => {\n    const point = {\n      x: 200,\n      y: 200\n    };\n    assert.doesNotThrow(() => {\n      legend.setPosition(point);\n    }, 'failed to execute legend.setPosition(point)');\n    assert.deepEqual(\n      legend.getPosition(),\n      point,\n      'legend.setPosition(point) not working: position not correct'\n    );\n  });\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./spec/legend.spec.js\n **/","const assert = chai.assert;\n\nconst Workbook = xmind.Workbook;\n\nconst options = {\n  firstSheetId: 'firstSheet',\n  rootTopicId: 'rootTopic',\n  firstSheetName: 'sheet 1',\n  rootTopicName: 'root topic'\n};\nconst workbook = new Workbook(options); // first sheet added\nconst sheet = workbook.getPrimarySheet();\nconst rootTopic = sheet.rootTopic;\n\nconst secondTopicOptions = {\n  id: 'secondTopic',\n  title: 'second topic'\n};\nrootTopic.addChild(secondTopicOptions);\n\nconst thirdTopicOptions = {\n  id: 'thirdTopic',\n  title: 'third topic'\n};\nrootTopic.addChild(thirdTopicOptions);\n\nconst relationship = sheet.addRelationship({\n  sourceId: options.rootTopicId,\n  targetId: secondTopicOptions.id\n});\n\ndescribe('Relationship', () => {\n  it('relationship.getSource()', () => {\n    assert.equal(\n      relationship.getSource(),\n      options.rootTopicId,\n      'relationship.getSource() not working: sourceId not correct'\n    );\n  });\n  it('relationship.setSource(value)', () => {\n    assert.doesNotThrow(() => {\n      relationship.setSource(thirdTopicOptions.id);\n    }, 'failed to execute relationship.setSource(value)');\n    assert.equal(\n      relationship.getSource(),\n      thirdTopicOptions.id,\n      'relationship.setSource(value) not working: source not correct'\n    );\n    assert.throws(() => {\n      relationship.setSource(secondTopicOptions.id);\n    }, 'source & target should not be the same');\n  });\n  it('relationship.getTarget()', () => {\n    assert.equal(\n      relationship.getTarget(),\n      secondTopicOptions.id,\n      'relationship.getTarget() not working: targetId not correct'\n    );\n  });\n  it('relationship.setTarget(value)', () => {\n    assert.doesNotThrow(() => {\n      relationship.setTarget(options.rootTopicId);\n    }, 'failed to execute relationship.setTarget(value)');\n    assert.equal(\n      relationship.getTarget(),\n      options.rootTopicId,\n      'relationship.setTarget(value) not working: target not correct'\n    );\n    assert.throws(() => {\n      relationship.setTarget(thirdTopicOptions.id);\n    }, 'source & target should not be the same');\n  });\n  it('relationship.getTitle()', () => {\n    assert.equal(\n      relationship.getTitle(),\n      '',\n      'relationship.getTitle() not working: title not correct'\n    );\n  });\n  it('relationship.setTitle(value)', () => {\n    const title = 'strange relationship';\n    assert.doesNotThrow(() => {\n      relationship.setTitle(title);\n    }, 'failed to execute relationship.setTitle(value)');\n    assert.equal(\n      relationship.getTitle(),\n      title,\n      'relationship.setTitle(value) not working: title not correct'\n    );\n  });\n  it('relationship.toPlainObject()', () => {\n    relationship.setModifiedTime(1);\n    assert.deepEqual(\n      relationship.toPlainObject(), {\n        id: relationship.id,\n        sheetId: sheet.id,\n        sourceId: relationship.getSource(),\n        targetId: relationship.getTarget(),\n        modifiedTime: 1,\n        title: relationship.getTitle()\n      },\n      'relationship.setTitle(value) not working: title not correct'\n    );\n  });\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./spec/relationship.spec.js\n **/","const assert = chai.assert;\n\nconst Workbook = xmind.Workbook;\n//Legend = xmind.Legend,\n//CONST = xmind.CONST,\n//utils = xmind.utils;\n\nconst options = {\n  firstSheetId: 'firstSheet',\n  rootTopicId: 'rootTopic',\n  firstSheetName: 'sheet 1',\n  rootTopicName: 'root topic',\n};\nconst workbook = new Workbook(options); // first sheet added\nconst sheet = workbook.getPrimarySheet();\n\nconst secondTopicOptions = {\n  id: 'secondTopic',\n  title: 'second topic'\n};\n\nconst relationshipOptions = {\n  id: 'relationship',\n  sourceId: options.rootTopicId,\n  targetId: secondTopicOptions.id\n};\nconst secondRelationshipOptions = {\n  id: 'secondRelationship',\n  sourceId: options.rootTopicId,\n  targetId: secondTopicOptions.id\n};\n\nlet relationship;\nlet rootTopic;\nlet legend;\n\ndescribe('Sheet', () => {\n  it('sheet.rootTopic', () => {\n    rootTopic = sheet.rootTopic;\n    rootTopic.addChild(secondTopicOptions);\n    assert.ok(\n      rootTopic,\n      'sheet.rootTopic is null'\n    );\n  });\n  it('sheet.topics', () => {\n    assert.equal(\n      sheet.topics.length,\n      2,\n      'sheet.topics is not correct'\n    );\n  });\n  it('sheet.topicById', () => {\n    assert.equal(\n      sheet.topicById[options.rootTopicId],\n      rootTopic,\n      'sheet.topicById is not correct'\n    );\n  });\n  it('sheet.relationships', () => {\n    relationship = sheet.addRelationship(relationshipOptions); // the first relationship added\n    assert.equal(\n      sheet.relationships.length,\n      1,\n      'sheet.relationships is not correct'\n    );\n  });\n  it('sheet.relationshipById', () => {\n    assert.equal(\n      sheet.relationshipById[relationshipOptions.id],\n      relationship,\n      'sheet.relationshipById is not correct'\n    );\n  });\n  it('sheet.legend', () => {\n    legend = sheet.addLegend();\n    assert.ok(\n      legend,\n      'sheet.legend is not correct'\n    );\n  });\n  it('sheet.getTitle()', () => {\n    assert.equal(\n      sheet.getTitle(),\n      options.firstSheetName,\n      'sheet.getTitle() not working: title is not correct'\n    );\n  });\n  it('sheet.setTitle(title)', () => {\n    const newTitle = 'new sheet';\n    assert.doesNotThrow(() => {\n      sheet.setTitle(newTitle);\n    }, 'failed to execute sheet.setTitle(title)');\n    assert.equal(\n      sheet.getTitle(),\n      newTitle,\n      'sheet.setTitle(title) not working: title is not correct'\n    );\n  });\n  it('sheet.getModifiedTime()', () => {\n    assert.doesNotThrow(() => {\n      new Date(sheet.getModifiedTime());\n    }, 'failed to execute sheet.getModifiedTime()');\n  });\n  it('sheet.getTheme()', () => {\n    assert.equal(\n      sheet.getTheme(),\n      '',\n      'sheet.getTheme() not working: theme is not correct'\n    );\n  });\n  it('sheet.setTheme(theme)', () => {\n    const newTheme = 'theme';\n    const oldModifiedTime = sheet.getModifiedTime();\n    assert.doesNotThrow(() => {\n      sheet.setTheme(newTheme);\n    }, 'failed to execute sheet.setTheme(theme)');\n    assert.equal(\n      sheet.getTheme(),\n      newTheme,\n      'sheet.setTheme(theme) not working: theme is not correct'\n    );\n    assert.notEqual(\n      sheet.getModifiedTime(),\n      oldModifiedTime,\n      'sheet.setTheme() not working: did not change modified time'\n    );\n  });\n  it('sheet.getRootTopic()', () => {\n    assert.equal(\n      sheet.getRootTopic(),\n      rootTopic,\n      'sheet.getRootTopic() not working: rootTopic is not correct'\n    );\n  });\n  describe('sheet.addRelationship(options)', () => {\n    it('adding normally', () => {\n      assert.doesNotThrow(() => {\n        sheet.addRelationship(secondRelationshipOptions);\n      }, 'failed to execute sheet.addRelationship(options)');\n      assert.equal(\n        sheet.relationships.length,\n        2,\n        'sheet.addRelationship(options) not working: relationship not added'\n      );\n    });\n    it('adding with the same parameters', () => {\n      assert.throws(() => {\n        sheet.addRelationship(relationshipOptions);\n      }, 'the same relationship already exists');\n    });\n  });\n  describe('sheet.setModifiedTime()', () => {\n    const newModifiedTime = 1;\n    it('set by timestamp(number)', () => {\n      assert.doesNotThrow(() => {\n        sheet.setModifiedTime(newModifiedTime);\n      }, 'failed to execute sheet.setModifiedTime(timestamp)');\n      assert.equal(\n        sheet.getModifiedTime(),\n        newModifiedTime,\n        'sheet.setModifiedTime(timestamp) not working: timestamp is not correct'\n      );\n    });\n    it('set by instance of Date', () => {\n      assert.doesNotThrow(() => {\n        sheet.setModifiedTime(new Date(newModifiedTime));\n      }, 'failed to execute sheet.setModifiedTime(date)');\n      assert.equal(\n        sheet.getModifiedTime(),\n        newModifiedTime,\n        'sheet.setModifiedTime(timestamp) not working: timestamp is not correct'\n      );\n    });\n  });\n  describe('sheet.removeRelationship(relationship/*index, id, instance or sourceId, targetId*/)', () => {\n    it('sheet.relationshipsNode is a shortcut', () => {\n    });\n\n    function checkRelationships(type) {\n      assert.equal(\n        workbook.doc.childNodes.length,\n        1,\n        `workbook.removeSheet(${type}) not working: xml structure did not changed`\n      );\n      assert.equal(\n        workbook.sheets.length,\n        1,\n        `workbook.removeSheet(${type}) not working: workbook.sheets did not changed`\n      );\n      assert.ok(\n        !workbook.sheetById[secondRelationshipOptions.id],\n        `workbook.removeSheet(${type}) not working: workbook.sheetById did not changed`\n      );\n    }\n\n    it('remove by id', () => {\n      assert.doesNotThrow(() => {\n        sheet.removeRelationship(secondRelationshipOptions.id); // secondSheet\n      }, 'failed to execute workbook.removeSheet(id)');\n      checkRelationships();\n    });\n    it('remove by index', () => {\n      sheet.addRelationship(secondRelationshipOptions); // reverse\n      assert.doesNotThrow(() => {\n        sheet.removeRelationship(1); // secondSheet\n      }, 'failed to execute workbook.removeSheet(id)');\n      checkRelationships();\n    });\n    it('remove by instance', () => {\n      const secondRelationship = sheet.addRelationship(secondRelationshipOptions); // reverse\n      assert.doesNotThrow(() => {\n        sheet.removeRelationship(secondRelationship); // secondSheet\n      }, 'failed to execute workbook.removeSheet(instance)');\n      checkRelationships();\n    });\n    it('remove by sourceId & targetId', () => {\n      sheet.addRelationship(secondRelationshipOptions); // reverse\n      assert.doesNotThrow(() => {\n        sheet.removeRelationship(\n          secondRelationshipOptions.sourceId,\n          secondRelationshipOptions.targetId\n        ); // secondSheet\n      }, 'failed to execute workbook.removeSheet(sourceId, targetId)');\n      checkRelationships();\n    });\n  });\n  it('sheet.destroy()', () => {\n  });\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./spec/sheet.spec.js\n **/","const assert = chai.assert;\nconst Workbook = xmind.Workbook;\nconst Topic = xmind.Topic;\nconst CONST = xmind.CONST;\nconst utils = xmind.utils;\n\nconst options = {\n  firstSheetId: 'firstSheet',\n  rootTopicId: 'rootTopic',\n  firstSheetName: 'sheet 1',\n  rootTopicName: 'root topic',\n};\nconst workbook = new Workbook(options); // first sheet added\nconst sheet = workbook.getPrimarySheet();\nconst topic = sheet.getRootTopic();\n\ndescribe('Topic', () => {\n  it('Topic.getTopic(topic/*id or instance*/, sheet)', () => {\n    assert.equal(\n      Topic.getTopic(options.rootTopicId, sheet),\n      topic,\n      'Topic.getTopic(id, sheet) not working: topic is not correct'\n    );\n    assert.equal(\n      Topic.getTopic(topic, sheet),\n      topic,\n      'Topic.getTopic(topic, sheet) not working: topic is not correct'\n    );\n  });\n  it('topic.getTitle()', () => {\n    assert.equal(\n      topic.getTitle(),\n      options.rootTopicName,\n      'topic.getTitle() not working: title is not correct'\n    );\n  });\n  it('topic.setTitle(title)', () => {\n    const newTitle = 'new topic';\n    assert.doesNotThrow(() => {\n      topic.setTitle(newTitle);\n    }, 'failed to execute topic.setTitle(title)');\n    assert.equal(\n      topic.getTitle(),\n      newTitle,\n      'topic.setTitle(title) not working: title is not correct'\n    );\n  });\n  it('topic.getModifiedTime()', () => {\n    assert.doesNotThrow(() => {\n      new Date(topic.getModifiedTime());\n    }, 'failed to execute topic.getModifiedTime()');\n  });\n  it('topic.getBranch()', () => {\n    assert.equal(\n      topic.getBranch(),\n      '',\n      'topic.getBranch() not working: branch is not correct'\n    );\n  });\n  it('topic.setBranch(value)', () => {\n    const branch = 'something';\n    assert.doesNotThrow(() => {\n      topic.setBranch(branch);\n    }, 'failed to execute sheet.setBranch(value)');\n    assert.equal(\n      topic.getBranch(),\n      branch,\n      'topic.setBranch(value) not working: branch is not correct'\n    );\n  });\n  it('topic.setBranchFolded()', () => {\n    assert.doesNotThrow(() => {\n      topic.setBranchFolded();\n    }, 'failed to execute sheet.setBranchFolded()');\n    assert.equal(\n      topic.getBranch(),\n      CONST.VAL_FOLDED,\n      'topic.setBranchFolded() not working: branch is not correct'\n    );\n  });\n  //it('topic.moveChild(fromIndex, toIndex)', function() {});\n  it('topic.getNotes()', () => {\n    assert.equal(\n      topic.getNotes(),\n      '',\n      'topic.getNotes() not working: notes is not correct'\n    );\n  });\n  it('topic.setNotes(notes)', () => {\n    const notes = 'some notes';\n    const multiLineNotes = 'some notes\\nother notes';\n    assert.doesNotThrow(() => {\n      topic.setNotes(notes);\n    }, 'failed to execute sheet.setNotes(notes)');\n    assert.equal(\n      topic.getNotes(),\n      notes,\n      'topic.setNotes(notes) not working: notes is not correct'\n    );\n    assert.equal(\n      topic.setNotes(multiLineNotes).getNotes(),\n      multiLineNotes,\n      'topic.setNotes(notes) not working: notes is not correct'\n    );\n  });\n  it('topic.getLabels()', () => {\n    assert.equal(\n      JSON.stringify(topic.getLabels()),\n      JSON.stringify([]),\n      'topic.getLabels() not working: labels is not correct'\n    );\n  });\n  it('topic.getHyperlink()', () => {\n    assert.equal(\n      topic.getHyperlink(),\n      '',\n      'topic.getHyperlink() not working: link is not correct'\n    );\n  });\n  it('topic.setHyperlink(hyperlink)', () => {\n    const link = 'http://sample.com';\n    assert.equal(\n      topic.setHyperlink(link).getHyperlink(),\n      link,\n      'topic.setHyperlink(hyperlink) not working: link is not correct'\n    );\n  });\n  it('topic.removeHyperlink()', () => {\n    assert.equal(\n      topic.removeHyperlink().getHyperlink(),\n      '',\n      'topic.removeHyperlink() not working: link is not correct'\n    );\n  });\n  it('topic.getMarkers()', () => {\n    assert.equal(\n      JSON.stringify(topic.getMarkers()),\n      JSON.stringify([]),\n      'topic.getMarkers() not working: markders is not correct'\n    );\n  });\n  it('topic.setMarkers(markers)', () => {\n    const markers = [\n      'a',\n      'bc',\n      'd'\n    ];\n    assert.doesNotThrow(() => {\n      topic.setMarkers(markers);\n    }, 'failed to execute sheet.setMarkers(markers)');\n    assert.equal(\n      JSON.stringify(topic.getMarkers()),\n      JSON.stringify([\n        'a',\n        'bc',\n        'd'\n      ]), 'topic.setMarkers(markers) not working: markers is not correct'\n    );\n  });\n  it('topic.addMarker(id)', () => {\n    topic.setMarkers([]);\n    assert.equal(\n      JSON.stringify(topic.addMarker('face').getMarkers()),\n      JSON.stringify([\n        'face'\n      ]), 'topic.addMarker(markerId) not working: markers is not correct'\n    );\n  });\n  it('topic.removeMarker(id)', () => {\n    topic.setMarkers([]);\n    assert.equal(\n      JSON.stringify(topic.addMarker('face').removeMarker('face').getMarkers()),\n      JSON.stringify([]),\n      'topic.addMarker(markerId) not working: markers is not correct'\n    );\n  });\n\n  const secondTopicOptions = {\n    id: 'secondTopic',\n    title: 'second topic'\n  };\n  const thirdTopicOptions = {\n    id: 'thirdTopic',\n    title: 'third topic'\n  };\n  const forthTopicOptions = {\n    id: 'forthTopic',\n    title: 'forth topic'\n  };\n  const secondTopic = topic.addChild(secondTopicOptions);\n  const thirdTopic = topic.addChild(thirdTopicOptions);\n  const forthTopic = topic.addChild(forthTopicOptions);\n\n  describe('topic.isAncestorOf(targetTopic)', () => {\n    it('check by id', () => {\n      assert.equal(\n        secondTopic.isAncestorOf(topic.id), false,\n        'topic.isAncestorOf(targetTopic) not working: result is wrong'\n      );\n      assert.equal(\n        topic.isAncestorOf(secondTopic.id), true,\n        'topic.isAncestorOf(targetTopic) not working: result is wrong'\n      );\n    });\n    it('check by instance', () => {\n      assert.equal(\n        secondTopic.isAncestorOf(topic), false,\n        'topic.isAncestorOf(targetTopic) not working: result is wrong'\n      );\n      assert.equal(\n        topic.isAncestorOf(secondTopic), true,\n        'topic.isAncestorOf(targetTopic) not working: result is wrong'\n      );\n    });\n  });\n  describe('topic.moveTo(targetTopic)', () => {\n    it('move by id', () => {\n      assert.doesNotThrow(() => {\n        thirdTopic.moveTo(secondTopic.id);\n      }, 'failed to execute topic.moveTo(targetTopicId)');\n    });\n    it('move by instance', () => {\n      assert.doesNotThrow(() => {\n        forthTopic.moveTo(thirdTopic);\n      }, 'failed to execute topic.moveTo(targetTopic)');\n    });\n    it('moving to null', () => {\n      assert.throws(() => {\n        forthTopic.moveTo();\n      }, 'target topic does not exist');\n    });\n    it('moving to itself', () => {\n      assert.throws(() => {\n        forthTopic.moveTo(forthTopic);\n      }, 'cannot move to itself');\n    });\n    it('moving to child', () => {\n      assert.throws(() => {\n        secondTopic.moveTo(forthTopic);\n      }, 'cannot move to a child topic');\n    });\n    it('moving to ancestor', () => {\n      assert.doesNotThrow(() => {\n        forthTopic.moveTo(secondTopic);\n      }, 'failed to execute topic.moveTo(targetTopic)');\n      assert.equal(\n        forthTopic.children.length, 0,\n        'topic.moveTo(targetTopic) not working: count of children is wrong'\n      );\n      assert.equal(\n        thirdTopic.children.length, 0,\n        'topic.moveTo(targetTopic) not working: count of children is wrong'\n      );\n      assert.equal(\n        secondTopic.children.length, 2,\n        'topic.moveTo(targetTopic) not working: count of children is wrong'\n      );\n      assert.equal(\n        topic.children.length, 1,\n        'topic.moveTo(targetTopic) not working: count of children is wrong'\n      );\n\n      function checkXmlStructure(parentTopic, childTopic) {\n        const childrenNode = utils.findOrCreateChildNode(\n          parentTopic.doc, CONST.TAG_CHILDREN\n        );\n        const childrenTopicsNode = utils.findOrCreateChildNode(\n          childrenNode, CONST.TAG_TOPICS\n        );\n        assert.ok(!!utils.findChildNode(childrenTopicsNode, CONST.TAG_TOPIC, {\n          id: childTopic.id\n        }), 'topic.moveTo(targetTopic) not working: xml structure is not correctly changed');\n      }\n\n      checkXmlStructure(topic, secondTopic);\n      checkXmlStructure(secondTopic, thirdTopic);\n      checkXmlStructure(secondTopic, forthTopic);\n    });\n  });\n  // add test cases for floating topics {\n  // }\n  describe('topic.setLabels(labels)', () => {\n    const labelsStr = 'a, bc , d';\n    const labels = [\n      'hello',\n      'world '\n    ];\n    it('set with string', () => {\n      assert.doesNotThrow(() => {\n        topic.setLabels(labelsStr);\n      }, 'failed to execute sheet.setLabels(labels)');\n      assert.equal(\n        JSON.stringify(topic.getLabels()),\n        JSON.stringify([\n          'a',\n          'bc',\n          'd'\n        ]), 'topic.setLabels(labels) not working: labels is not correct'\n      );\n      assert.equal(\n        JSON.stringify(topic.setLabels(labels).getLabels()),\n        JSON.stringify([\n          'hello',\n          'world'\n        ]), 'topic.setLabels(labels) not working: labels is not correct'\n      );\n    });\n    it('set with array', () => {\n    });\n  });\n  describe('topic.addChild(/*instance or options*/)', () => {\n    it('add with an instance', () => {\n    });\n    it('add with options', () => {\n    });\n  });\n  describe('topic.removeChild(child/*id or instance*/, dryrun)', () => {\n    it('remove by id', () => {\n    });\n    it('remove by instance', () => {\n    });\n    it('remove in dryrun mode', () => {\n    });\n  });\n  describe('topic.setModifiedTime()', () => {\n    const newModifiedTime = 1;\n    it('set by timestamp(number)', () => {\n      assert.doesNotThrow(() => {\n        topic.setModifiedTime(newModifiedTime);\n      }, 'failed to execute topic.setModifiedTime(timestamp)');\n      assert.equal(\n        topic.getModifiedTime(),\n        newModifiedTime,\n        'topic.setModifiedTime(timestamp) not working: timestamp is not correct'\n      );\n    });\n    it('set by instance of Date', () => {\n      assert.doesNotThrow(() => {\n        topic.setModifiedTime(new Date(newModifiedTime));\n      }, 'failed to execute topic.setModifiedTime(date)');\n      assert.equal(\n        topic.getModifiedTime(),\n        newModifiedTime,\n        'topic.setModifiedTime(timestamp) not working: timestamp is not correct'\n      );\n    });\n  });\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./spec/topic.spec.js\n **/","const assert = chai.assert;\n\nconst Workbook = xmind.Workbook;\n\ndescribe('Workbook', () => {\n  const options = {\n    firstSheetId: 'firstSheet',\n    rootTopicId: 'rootTopic',\n    firstSheetName: 'sheet 1',\n    rootTopicName: 'root topic',\n  };\n  let workbook, sheet, rootTopic;\n\n  it('new Workbook(options)', () => {\n    assert.doesNotThrow(() => {\n      workbook = new Workbook(options); // first sheet added\n      sheet = workbook.getPrimarySheet();\n      rootTopic = sheet.rootTopic;\n    }, 'failed to create a Workbook instance');\n  });\n  it('workbook.sheetById', () => {\n    assert.equal(\n      workbook.sheetById[options.firstSheetId],\n      sheet,\n      'workbook.sheetById is not working'\n    );\n  });\n  it('workbook.sheets', () => {\n    assert.equal(\n      workbook.sheets[0],\n      sheet,\n      'workbook.sheets is not working'\n    );\n  });\n\n  it('workbook.getModifiedTime()', () => {\n    assert.doesNotThrow(() => {\n      new Date(workbook.getModifiedTime());\n    }, 'failed to execute workbook.getModifiedTime()');\n  });\n\n  it('workbook.getPrimarySheet()', () => {\n    assert.equal(\n      options.firstSheetName,\n      sheet.getTitle(),\n      'sheet name unmatched'\n    );\n    assert.equal(\n      options.rootTopicName,\n      rootTopic.getTitle(),\n      'root topic name unmatched'\n    );\n  });\n\n  const secondSheetOptions = {\n    id: 'secondSheet',\n    title: 'sheet 2',\n    rootTopicId: 'rootTopic',\n    rootTopicName: 'root topic',\n  };\n  it('workbook.addSheet(options)', () => {\n    assert.throws(() => {\n      workbook.addSheet({\n        id: options.firstSheetId, // duplicated id\n        title: '',\n        rootTopicId: 'some id',\n        rootTopicName: 'some name',\n      });\n    }, `sheet id '${options.firstSheetId}' already exists!`);\n    assert.doesNotThrow(() => {\n      workbook.addSheet(secondSheetOptions); // second sheet added\n    }, 'failed to execute workbook.addSheet(options)');\n  });\n  it('workbook.moveSheet(fromIndex, toIndex)', () => {\n    assert.doesNotThrow(() => {\n      workbook.moveSheet(1, 0);\n    }, 'failed to execute workbook.moveSheet(fromIndex, toIndex)');\n    assert.equal(\n      workbook.doc.firstChild.getAttribute('id'),\n      workbook.sheets[0].doc.getAttribute('id'),\n      'workbook.moveSheet(fromIndex, toIndex) not working: xml structure did not changed'\n    );\n    assert.notEqual(\n      workbook.getPrimarySheet(),\n      sheet,\n      'workbook.moveSheet(fromIndex, toIndex) not working'\n    );\n  });\n  it('workbook.destroy()', () => {\n    workbook.destroy();\n    assert.ok(\n      workbook,\n      'workbook should not be destroyed'\n    );\n  });\n  it('workbook.toJSON()', () => {\n    assert.doesNotThrow(() => {\n      workbook.toJSON();\n    });\n  });\n  describe('workbook.setModifiedTime()', () => {\n    const newModifiedTime = 1;\n    it('set by timestamp(number)', () => {\n      assert.doesNotThrow(() => {\n        workbook.setModifiedTime(newModifiedTime);\n      }, 'failed to execute workbook.setModifiedTime(timestamp)');\n      assert.equal(\n        workbook.getModifiedTime(),\n        newModifiedTime,\n        'workbook.setModifiedTime(timestamp) not working: timestamp is not correct'\n      );\n    });\n    it('set by instance of Date', () => {\n      assert.doesNotThrow(() => {\n        workbook.setModifiedTime(new Date(newModifiedTime));\n      }, 'failed to execute workbook.setModifiedTime(date)');\n      assert.equal(\n        workbook.getModifiedTime(),\n        newModifiedTime,\n        'workbook.setModifiedTime(timestamp) not working: timestamp is not correct'\n      );\n    });\n  });\n  describe('workbook.removeSheet(/* id or index or Sheet instance */)', () => {\n    it('remove by id', () => {\n      assert.doesNotThrow(() => {\n        workbook.removeSheet(secondSheetOptions.id); // secondSheet\n      }, 'failed to execute workbook.removeSheet(id)');\n      assert.equal(\n        workbook.doc.childNodes.length,\n        1,\n        'workbook.removeSheet(id) not working: xml structure did not changed'\n      );\n      assert.equal(\n        workbook.sheets.length,\n        1,\n        'workbook.removeSheet(id) not working: workbook.sheets did not changed'\n      );\n      assert.ok(\n        !workbook.sheetById[secondSheetOptions.id],\n        'workbook.removeSheet(id) not working: workbook.sheetById did not changed'\n      );\n    });\n    it('remove by index', () => {\n      workbook.addSheet(secondSheetOptions); // reverse\n      assert.doesNotThrow(() => {\n        workbook.removeSheet(1); // secondSheet\n      }, 'failed to execute workbook.removeSheet(index)');\n      assert.equal(\n        workbook.doc.childNodes.length,\n        1,\n        'workbook.removeSheet(index) not working: xml structure did not changed'\n      );\n      assert.equal(\n        workbook.sheets.length,\n        1,\n        'workbook.removeSheet(index) not working: workbook.sheets did not changed'\n      );\n      assert.ok(\n        !workbook.sheetById[secondSheetOptions.id],\n        'workbook.removeSheet(index) not working: workbook.sheetById did not changed'\n      );\n    });\n    it('remove by instance', () => {\n      const secondSheet = workbook.addSheet(secondSheetOptions); // reverse\n      assert.doesNotThrow(() => {\n        workbook.removeSheet(secondSheet); // secondSheet\n      }, 'failed to execute workbook.removeSheet(index)');\n      assert.equal(\n        workbook.doc.childNodes.length,\n        1,\n        'workbook.removeSheet(index) not working: xml structure did not changed'\n      );\n      assert.equal(\n        workbook.sheets.length,\n        1,\n        'workbook.removeSheet(index) not working: workbook.sheets did not changed'\n      );\n      assert.ok(\n        !workbook.sheetById[secondSheetOptions.id],\n        'workbook.removeSheet(index) not working: workbook.sheetById did not changed'\n      );\n    });\n  });\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./spec/workbook.spec.js\n **/"],"sourceRoot":""}